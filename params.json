{"name":"Pilbox","tagline":"An image resizing application server","body":"Pilbox [![Build Status](https://travis-ci.org/agschwender/pilbox.png)](https://travis-ci.org/agschwender/pilbox)\r\n======\r\n\r\nPilbox is an image resizing application server built on Python's [Tornado web framework](http://www.tornadoweb.org/en/stable/) using the [Python Imaging Library (Pillow)](https://pypi.python.org/pypi/Pillow/2.1.0). It is not intended to be the primary source of images, but instead acts as a proxy which requests images and resizes them as desired.\r\n\r\nSetup\r\n=====\r\n\r\nDependencies\r\n------------\r\n\r\n  * [Python 2.7](http://www.python.org/download/)\r\n  * [Pillow 2.1.0](https://pypi.python.org/pypi/Pillow/2.1.0)\r\n  * [Tornado 3.1](https://pypi.python.org/pypi/tornado/3.1)\r\n  * [OpenCV 2.x](http://opencv.org/)\r\n  * Image Libraries: libjpeg-dev, libfreetype6, libfreetype6-dev, zlib1g-dev\r\n\r\nVagrant\r\n-------\r\n\r\nPackaged with Pilbox is a [Vagrant](http://www.vagrantup.com/) configuration file which installs all necessary dependencies on a virtual box. See the [Vagrant documentation for installation instructions](http://docs.vagrantup.com/v2/installation/). Once installed, the following will start a virtual machine.\r\n\r\n    $ vagrant up\r\n\r\nTo access the virtual machine itself, simply...\r\n\r\n    $ vagrant ssh\r\n\r\nRunning\r\n=======\r\n\r\nManual\r\n------\r\n\r\nTo run the application, issue the following command\r\n\r\n    $ python -m pilbox.app\r\n\r\nBy default, this will run the application on port 8888 and can be accessed by visiting:\r\n\r\n    http://localhost:8888/\r\n\r\nTo see a list of all available options, run\r\n\r\n    $ python -m pilbox.app --help\r\n\r\nVagrant\r\n-------\r\n\r\nWhen running via Vagrant, the application is automatically started on port 8888 on 192.168.100.100, i.e.\r\n\r\n    http://192.168.100.100:8888/\r\n\r\nCalling\r\n=======\r\n\r\nTo use the image resizing service, include the application url as you would any other image. E.g. this image url\r\n\r\n```html\r\n<img src=\"http://i.imgur.com/zZ8XmBA.jpg\" />\r\n```\r\n\r\nWould be replaced with this image url\r\n\r\n```html\r\n<img src=\"http://localhost:8888/?url=http%3A%2F%2Fi.imgur.com%2FzZ8XmBA.jpg&w=300&h=300&mode=crop\" />\r\n```\r\n\r\nThis will request the image served at the supplied url and resize it to 300x300 using the crop mode. The following is the list of parameters that can be supplied to the service\r\n\r\n  * _url_: The url of the image to be resized\r\n  * _w_: The desired width of the image\r\n  * _h_: The desired height of the image\r\n  * _mode_: The resizing method: clip, crop (default), fill and scale\r\n    * _clip_: Resize to fit within the desired region, keeping aspect ratio\r\n    * _crop_: Resize so one dimension fits within region, center, cut remaining\r\n    * _fill_: Fills the clipped space with a background color\r\n    * _scale_: Resize to fit within the desired region, ignoring aspect ratio\r\n  * _bg_: Background color used with fill mode, 3- or 6-digit hexadecimal number\r\n  * _pos_: The crop position\r\n    * _top-left_: Crop from the top left\r\n    * _top_: Crop from the top center\r\n    * _top-right_: Crop from the top right\r\n    * _left_: Crop from the center left\r\n    * _center_: Crop from the center\r\n    * _right_: Crop from the center right\r\n    * _bottom-left_: Crop from the bottom left\r\n    * _bottom_: Crop from the bottom center\r\n    * _bottom-right_: Crop from the bottom right\r\n    * _face_: Identify faces and crop from the midpoint of their position(s)\r\n  * _client_: The client name\r\n  * _sig_: The signature\r\n\r\nThe `url`, and either `w` or `h` parameters are required. If only one dimension is specified, the application will determine the other dimension using the aspect ratio. `mode` is optional and defaults to `crop`. `bg` is optional and defaults to `fff`. `pos` is optional and defaults to `center`. `client` is required only if the `client_name` is defined within the configuration file. Likewise, `sig` is required only if the `client_key` is defined within the configuration file. See the [signing section](#signing) for details on how to generate the signature.\r\n\r\nTesting\r\n=======\r\n\r\nTo run all tests, issue the following command\r\n\r\n    $ python -m pilbox.test.runtests\r\n\r\nTo run individual tests, simply indicate the test to be run, e.g.\r\n\r\n    $ python -m pilbox.test.runtests pilbox.test.signature_test\r\n\r\nSigning\r\n=======\r\n\r\nIn order to secure requests so that unknown third parties cannot easily use the resize service, the application can require that requests provide a signature. To enable this feature, set the `client_key` option. The signature is a hexadecimal digest generated from the client key and the query string using the HMAC-SHA1 message authentication code (MAC) algorithm. The below python code provides an example implementation.\r\n\r\n```python\r\nimport hashlib\r\nimport hmac\r\n\r\ndef derive_signature(key, qs):\r\n    m = hmac.new(key, None, hashlib.sha1)\r\n    m.update(qs)\r\n    return m.hexdigest()\r\n```\r\n\r\nThe signature is passed to the application by appending the `sig` paramater to the query string; e.g. `x=1&y=2&z=3&sig=c9516346abf62876b6345817dba2f9a0c797ef26`. Note, the application does not include the leading question mark when verifying the supplied signature. To verify your signature implementation, see the `pilbox.signature` command described in the [tools section](#tools).\r\n\r\nTools\r\n=====\r\n\r\nTo verify that your client application is generating correct signatures, use the signature command.\r\n\r\n    $ python -m pilbox.signature --key=abcdef \"x=1&y=2&z=3\"\r\n    Query String: x=1&y=2&z=3\r\n    Signature: c9516346abf62876b6345817dba2f9a0c797ef26\r\n    Signed Query String: x=1&y=2&z=3&sig=c9516346abf62876b6345817dba2f9a0c797ef26\r\n\r\nThe application allows the use of the resize functionality via the command line.\r\n\r\n    $ python -m pilbox.image --width=300 --height=300 http://i.imgur.com/zZ8XmBA.jpg > /tmp/foo.jpg\r\n\r\nIf a new mode is added or a modification was made to the libraries that would change the current expected output for tests, run the generate test command to regenerate the expected output for the test cases.\r\n\r\n    $ python -m pilbox.test.genexpected\r\n\r\nDeploying\r\n=========\r\n\r\nThe application itself does not include any caching. It is recommended that the application run behind a CDN for larger applications or behind varnish for smaller ones.\r\n\r\nTODO\r\n====\r\n\r\n  * Add backends (S3, file system, etc...) if necessary\r\n","google":"UA-8326371-5","note":"Don't delete this file! It's used internally to help with page regeneration."}