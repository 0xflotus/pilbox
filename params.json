{"name":"Pilbox","tagline":"Pilbox is an image resizing application server built on Python's Tornado web framework using the Python Imaging Library (PIL). It is not intended to be the primary source of images, but instead acts as a proxy which requests images and resizes them to the desired size.","body":"Pilbox\r\n======\r\n\r\nPilbox is an image resizing application server built on Python's [Tornado web framework](http://www.tornadoweb.org/en/stable/) using the [Python Imaging Library (PIL)](http://www.pythonware.com/products/pil/). It is not intended to be the primary source of images, but instead acts as a proxy which requests images and resizes them as desired.\r\n\r\nSetup\r\n=====\r\n\r\nDependencies\r\n------------\r\n\r\n  * [Python 2.7](http://www.python.org/download/)\r\n  * [PIL 1.1.7](http://www.pythonware.com/products/pil/)\r\n  * [tornado 3.1](https://pypi.python.org/pypi/tornado/3.1)\r\n  * Image Libraries: libjpeg-dev, libfreetype6, libfreetype6-dev, zlib1g-dev\r\n\r\nVagrant\r\n-------\r\n\r\nPackaged with Pilbox is a [Vagrant](http://www.vagrantup.com/) configuration file which installs all necessary dependencies on a virtual box. See the [Vagrant documentation for installation instructions](http://docs.vagrantup.com/v2/installation/). Once installed, the following will start a virtual machine.\r\n\r\n    $ vagrant up\r\n\r\nTo access the virtual machine itself, simply...\r\n\r\n    $ vagrant ssh\r\n\r\nRunning\r\n=======\r\n\r\nManual\r\n------\r\n\r\nTo run the application, issue the following command\r\n\r\n    $ python pilbox/app.py\r\n\r\nBy default, this will run the application on port 8888 and can be accessed by visiting:\r\n\r\n    http://localhost:8888/\r\n\r\nTo see a list of all available options, run\r\n\r\n    $ python pilbox/app.py --help\r\n\r\nVagrant\r\n-------\r\n\r\nWhen running via Vagrant, the application is automatically started via [Supervisor](http://supervisord.org/). The Vagrant setup runs the application behind [Nginx](http://nginx.org/) which caches the output via [Varnish](https://www.varnish-cache.org/).\r\n\r\nIf accessing the application via Vagrant, you will need to determine the virtual machine's IP address.\r\n\r\n    $ vagrant ssh\r\n    $ /sbin/ifconfig -a\r\n\r\nOnce determined, the application can be accessed via port 80, e.g.\r\n\r\n    http://192.168.1.1/\r\n\r\nCalling\r\n=======\r\n\r\nTo use the image resizing service, include the application url as you would any other image, e.g.\r\n\r\n    <img src=\"http://localhost:8888/?url=http%3A%2F%2Fi.imgur.com%2FzZ8XmBA.jpg&w=300&h=300&mode=crop\" width=\"300\" height=\"300\" />\r\n\r\nThis will request the image served at the supplied url and resize it to 300x300 using the crop mode. The following is the list of parameters that can be supplied to the service\r\n\r\n  * _url_: The url of the image to be resized\r\n  * _w_: The desired width of the image\r\n  * _h_: The desired height of the image\r\n  * _mode_: The resizing method: clip, crop (default) and scale\r\n    * _clip_: Resize to fit within the desired region, keeping aspect ratio\r\n    * _crop_: Resize so one dimension fits within region, center, cut remaining\r\n    * _scale_: Resize to fit within the desired region, ignoring aspect ratio\r\n  * _client_: The client name\r\n  * _sig_: The signature\r\n\r\nThe `url`, `w` and `h` parameters are required. `mode` is optional and defaults to `crop`. `client` is required only if the `client_name` is defined within the configuration file. Likewise, `sig` is required only if the `client_key` is defined within the configuration file. See the [signing section](#signing) for details on how to generate the signature.\r\n\r\nTesting\r\n=======\r\n\r\nTo run all tests, issue the following command\r\n\r\n    $ python -m pilbox.test.runtests\r\n\r\nTo run individual tests, simply indicate the test to be run, e.g.\r\n\r\n    $ python -m pilbox.test.runtests pilbox.test.signature_test\r\n\r\nSigning\r\n=======\r\n\r\nIn order to secure requests so that unknown third parties cannot easily use the resize service, the application can require that requests provide a signature. To enable this feature, set the `client_key` option. The signature is a hexadecimal digest generated from the client key and the query string using the HMAC-SHA1 message authentication code (MAC) algorithm. The below python code provides an example implementation.\r\n\r\n    import hashlib\r\n    import hmac\r\n\r\n    def derive_signature(key, qs):\r\n        m = hmac.new(key, None, hashlib.sha1)\r\n        m.update(qs)\r\n        return m.hexdigest()\r\n\r\nThe signature is passed to the application by appending the `sig` paramater to the query string; e.g. `x=1&y=2&z=3&sig=c9516346abf62876b6345817dba2f9a0c797ef26`. Note, the application does not include the leading question mark when verifying the supplied signature. To verify your signature implementation, see the `pilbox.signature` command described in the [tools section](#tools).\r\n\r\nTools\r\n=====\r\n\r\nTo verify that your client application is generating correct signatures, use the signature command.\r\n\r\n    $ python -m pilbox.signature --key=abcdef \"x=1&y=2&z=3\"\r\n    Query String: x=1&y=2&z=3\r\n    Signature: c9516346abf62876b6345817dba2f9a0c797ef26\r\n    Signed Query String: x=1&y=2&z=3&sig=c9516346abf62876b6345817dba2f9a0c797ef26\r\n\r\nThe application allows the use of the resize functionality via the command line.\r\n\r\n    $ python -m pilbox.image --width=300 --height=300 http://i.imgur.com/zZ8XmBA.jpg > /tmp/foo.jpg\r\n\r\nTODO\r\n====\r\n\r\n  * Add controller tests\r\n  * Build-in automatic deploy to ec2 instance\r\n  * Fill resize with background\r\n  * Crop resize positioning\r\n  * Add backends (S3, file system, etc...) if necessary\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}