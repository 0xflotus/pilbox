{"name":"Pilbox","tagline":"An image resizing application server","body":"Pilbox\r\n======\r\n\r\n[![PyPi version](https://pypip.in/v/pilbox/badge.png)](https://pypi.python.org/pypi/pilbox) [![Build Status](https://travis-ci.org/agschwender/pilbox.png)](https://travis-ci.org/agschwender/pilbox) [![Coverage Status](https://coveralls.io/repos/agschwender/pilbox/badge.png)](https://coveralls.io/r/agschwender/pilbox) [![Downloads](https://pypip.in/d/pilbox/badge.png)](https://pypi.python.org/pypi/pilbox)\r\n\r\nPilbox is an image processing application server built on Python's [Tornado web framework](http://www.tornadoweb.org/en/stable/) using the [Python Imaging Library (Pillow)](https://pypi.python.org/pypi/Pillow/2.1.0). It is not intended to be the primary source of images, but instead acts as a proxy which requests images and resizes them as desired.\r\n\r\nSetup\r\n=====\r\n\r\nDependencies\r\n------------\r\n\r\n  * >= [Python 2.7](http://www.python.org/download/)\r\n  * [Pillow 2.2.1](https://pypi.python.org/pypi/Pillow/2.2.1)\r\n  * [Tornado 3.1.1](https://pypi.python.org/pypi/tornado/3.1.1)\r\n  * [OpenCV 2.x](http://opencv.org/) (optional)\r\n  * [PycURL 7.x](http://pycurl.sourceforge.net/) (optional; required for proxy requests)\r\n  * Image Libraries: libjpeg-dev, libfreetype6-dev, libwebp-dev, zlib1g-dev\r\n\r\nInstall\r\n-------\r\n\r\nPilbox can be installed with pip\r\n\r\n    $ pip install pilbox\r\n\r\nOr easy_install\r\n\r\n    $ easy_install pilbox\r\n\r\nOr from source\r\n\r\n    $ git clone https://github.com/agschwender/pilbox.git\r\n\r\nPackaged with Pilbox is a [Vagrant](http://www.vagrantup.com/) configuration file which installs all necessary dependencies on a virtual box using [Ansible](http://www.ansibleworks.com/). See the [Vagrant documentation](http://docs.vagrantup.com/v2/installation/) and the [Ansible documentation](http://www.ansibleworks.com/docs/gettingstarted.html#getting-ansible) for installation instructions. Once installed, the following will start and provision a virtual machine.\r\n\r\n    $ vagrant up\r\n    $ vagrant provision\r\n\r\nTo access the virtual machine itself, simply...\r\n\r\n    $ vagrant ssh\r\n\r\nWhen running via Vagrant, the application is automatically started on port 8888 on 192.168.100.100, i.e.\r\n\r\n    http://192.168.100.100:8888/\r\n\r\nRunning\r\n=======\r\n\r\nTo run the application, issue the following command\r\n\r\n    $ python -m pilbox.app\r\n\r\nBy default, this will run the application on port 8888 and can be accessed by visiting:\r\n\r\n    http://localhost:8888/\r\n\r\nTo see a list of all available options, run\r\n\r\n    $ python -m pilbox.app --help\r\n    Usage: pilbox/app.py [OPTIONS]\r\n\r\n    Options:\r\n\r\n      --allowed_hosts            list of allowed hosts (default [])\r\n      --allowed_operations       list of allowed operations (default [])\r\n      --background               default hexadecimal bg color (RGB or ARGB)\r\n      --client_key               client key\r\n      --client_name              client name\r\n      --config                   path to configuration file\r\n      --content_type_from_image  override content type using image mime type\r\n      --debug                    run in debug mode (default False)\r\n      --expand                   default to expand when rotating\r\n      --filter                   default filter to use when resizing\r\n      --help                     show this help information\r\n      --implicit_base_url        prepend protocol/host to url paths\r\n      --max_requests             max concurrent requests (default 40)\r\n      --operation                default operation to perform\r\n      --optimize                 default to optimize when saving\r\n      --port                     run on the given port (default 8888)\r\n      --position                 default cropping position\r\n      --progressive              default to progressive when saving\r\n      --proxy_host               proxy hostname\r\n      --proxy_port               proxy port\r\n      --quality                  default jpeg quality, 0-100 or keep\r\n      --timeout                  timeout of requests in seconds (default 10)\r\n      --validate_cert            validate certificates (default True)\r\n\r\nCalling\r\n=======\r\n\r\nTo use the image processing service, include the application url as you would any other image. E.g. this image url\r\n\r\n```html\r\n<img src=\"http://i.imgur.com/zZ8XmBA.jpg\" />\r\n```\r\n\r\nWould be replaced with this image url\r\n\r\n```html\r\n<img src=\"http://localhost:8888/?url=http%3A%2F%2Fi.imgur.com%2FzZ8XmBA.jpg&w=300&h=300&mode=crop\" />\r\n```\r\n\r\nThis will request the image served at the supplied url and resize it to `300x300` using the `crop` mode. The below is the list of parameters that can be supplied to the service.\r\n\r\nGeneral Parameters\r\n------------------\r\n\r\n  * _url_: The url of the image to be resized\r\n  * _op_: The operation to perform: noop, resize (default), rotate\r\n    * _noop_: No operation is performed, image is returned as it is received\r\n    * _region_: Select a sub-region from the image\r\n    * _resize_: Resize the image\r\n    * _rotate_: Rotate the image\r\n\r\nResize Parameters\r\n-----------------\r\n\r\n  * _w_: The desired width of the image\r\n  * _h_: The desired height of the image\r\n  * _mode_: The resizing method: clip, crop (default), fill and scale\r\n    * _clip_: Resize to fit within the desired region, keeping aspect ratio\r\n    * _crop_: Resize so one dimension fits within region, center, cut remaining\r\n    * _fill_: Fills the clipped space with a background color\r\n    * _scale_: Resize to fit within the desired region, ignoring aspect ratio\r\n  * _bg_: Background color used with fill mode (RGB or ARGB)\r\n    * _RGB_: 3- or 6-digit hexadecimal number\r\n    * _ARGB_: 4- or 8-digit hexadecimal number, only relevant for PNG images\r\n  * _filter_: The filtering algorithm used for resizing\r\n    * _nearest_: Fastest, but often images appear pixelated\r\n    * _bilinear_: Faster, can produce acceptable results\r\n    * _bicubic_: Fast, can produce acceptable results\r\n    * _antialias_: Slower, produces the best results\r\n  * _fmt_: The output format to save as, defaults to the source format\r\n    * _jpeg_: Save as JPEG\r\n    * _png_: Save as PNG\r\n    * _webp_: Save as WebP\r\n  * _pos_: The crop position\r\n    * _top-left_: Crop from the top left\r\n    * _top_: Crop from the top center\r\n    * _top-right_: Crop from the top right\r\n    * _left_: Crop from the center left\r\n    * _center_: Crop from the center\r\n    * _right_: Crop from the center right\r\n    * _bottom-left_: Crop from the bottom left\r\n    * _bottom_: Crop from the bottom center\r\n    * _bottom-right_: Crop from the bottom right\r\n    * _face_: Identify faces and crop from the midpoint of their position(s)\r\n    * _x,y_: Custom center point position ratio, e.g. 0.0,0.75\r\n  * _opt_: The output should be optimized, only relevant to JPEGs and PNGs\r\n  * _prog_: Enable progressive output, only relevant to JPEGs\r\n  * _q_: The quality, (1-100) or keep, used to save the image, only relevant to JPEGs\r\n\r\nRegion Parameters\r\n-----------------\r\n\r\n  * _fmt_: The output format to save as, defaults to the source format\r\n    * _jpeg_: Save as JPEG\r\n    * _png_: Save as PNG\r\n    * _webp_: Save as WebP\r\n  * _opt_: The output should be optimized, only relevant to JPEGs and PNGs\r\n  * _prog_: Enable progressive output, only relevant to JPEGs\r\n  * _q_: The quality, (1-100) or keep, used to save the image, only relevant to JPEGs\r\n  * _rect_: The region as x,y,w,h; x,y: top-left position, w,h: width/height of region\r\n\r\nRotate Parameters\r\n-----------------\r\n\r\n  * _deg_: The desired rotation angle degrees\r\n    * 0-359: The number of degrees to rotate (clockwise)\r\n    * auto: Auto rotation based on EXIF orientation, only relevant to JPEGs\r\n  * _expand_: Expand the sizeto include the full rotated image\r\n  * _fmt_: The output format to save as, defaults to the source format\r\n    * _jpeg_: Save as JPEG\r\n    * _png_: Save as PNG\r\n    * _webp_: Save as WebP\r\n  * _opt_: The output should be optimized, only relevant to JPEGs and PNGs\r\n  * _prog_: Enable progressive output, only relevant to JPEGs\r\n  * _q_: The quality, (1-100) or keep, used to save the image, only relevant to JPEGs\r\n\r\nSecurity-related Parameters\r\n---------------------------\r\n\r\n  * _client_: The client name\r\n  * _sig_: The signature\r\n\r\nThe `url` parameter is always required as it dictates the image that will be manipulated. `op` is optional and defaults to `resize`. It also supports a comma separated list of operations, where each operation is applied in the order that it appears in the list. Depending on the operation, additional parameters are required.  All image manipulation requests accept `fmt`, `opt` and `q`. `fmt` is optional and defaults to the source image format. `opt` is optional and defaults to `0`.  `q` is optional and defaults to `90`. To ensure security, all requests also support, `client` and `sig`. `client` is required only if the `client_name` is defined within the configuration file. Likewise, `sig` is required only if the `client_key` is defined within the configuration file. See the [signing section](#signing) for details on how to generate the signature.\r\n\r\nFor resizing, either the `w` or `h` parameter is required. If only one dimension is specified, the application will determine the other dimension using the aspect ratio. `mode` is optional and defaults to `crop`. `filter` is optional and defaults to `antialias`.  `bg` is optional and defaults to `fff`. `pos` is optional and defaults to `center`.\r\n\r\nFor region sub-selection, `rect` is required. For rotating, `deg` is required. `expand` is optional and defaults to `0` (disabled). It is recommended that this feature not be used as it typically does not produce high quality images.\r\n\r\nNote, all built-in defaults can be overridden by setting them in the configuration file. See the [configuration section](#configuration) for more details.\r\n\r\nExamples\r\n========\r\n\r\nThe following images show the various resizing modes in action for an original image size of `640x428` that is being resized to `500x400`.\r\n\r\nClip\r\n----\r\n\r\nThe image is resized to fit within a `500x400` box, maintaining aspect ratio and producing an image that is `500x334`. Clipping is useful when no portion of the image can be lost and it is acceptable that the image not be exactly the supplied dimensions, but merely fit within the dimensions.\r\n\r\n![Clipped image](https://raw.github.com/agschwender/pilbox/master/pilbox/test/data/expected/example-500x400-clip.jpg)\r\n\r\nCrop\r\n----\r\n\r\nThe image is resized so that one dimension fits within the `500x400` box. It is then centered and the excess is cut from the image. Cropping is useful when the position of the subject is known and the image must be exactly the supplied size.\r\n\r\n![Cropped image](https://raw.github.com/agschwender/pilbox/master/pilbox/test/data/expected/example-500x400-crop.jpg)\r\n\r\nFill\r\n----\r\n\r\nSimilar to clip, fill resizes the image to fit within a `500x400` box. Once clipped, the image is centered within the box and all left over space is filled with the supplied background color. Filling is useful when no portion of the image can be lost and it must be exactly the supplied size.\r\n\r\n![Filled image](https://raw.github.com/agschwender/pilbox/master/pilbox/test/data/expected/example-500x400-fill-ccc.jpg)\r\n\r\nScale\r\n-----\r\n\r\nThe image is clipped to fit within the `500x400` box and then stretched to fill the excess space. Scaling is often not useful in production environments as it generally produces poor quality images. This mode is largely included for completeness.\r\n\r\n![Scale image](https://raw.github.com/agschwender/pilbox/master/pilbox/test/data/expected/example-500x400-scale.jpg)\r\n\r\n\r\nTesting\r\n=======\r\n\r\nTo run all tests, issue the following command\r\n\r\n    $ python -m pilbox.test.runtests\r\n\r\nTo run individual tests, simply indicate the test to be run, e.g.\r\n\r\n    $ python -m pilbox.test.runtests pilbox.test.signature_test\r\n\r\nSigning\r\n=======\r\n\r\nIn order to secure requests so that unknown third parties cannot easily use the resize service, the application can require that requests provide a signature. To enable this feature, set the `client_key` option. The signature is a hexadecimal digest generated from the client key and the query string using the HMAC-SHA1 message authentication code (MAC) algorithm. The below python code provides an example implementation.\r\n\r\n```python\r\nimport hashlib\r\nimport hmac\r\n\r\ndef derive_signature(key, qs):\r\n    m = hmac.new(key, None, hashlib.sha1)\r\n    m.update(qs)\r\n    return m.hexdigest()\r\n```\r\n\r\nThe signature is passed to the application by appending the `sig` parameter to the query string; e.g. `x=1&y=2&z=3&sig=c9516346abf62876b6345817dba2f9a0c797ef26`. Note, the application does not include the leading question mark when verifying the supplied signature. To verify your signature implementation, see the `pilbox.signature` command described in the [tools section](#tools).\r\n\r\nConfiguration\r\n=============\r\n\r\nAll options that can be supplied to the application via the command line, can also be specified in the configuration file. Configuration files are simply python files that define the options as variables. The below is an example configuration.\r\n\r\n    # General settings\r\n    port = 8888\r\n\r\n    # Set client name and key if the application requires signed requests. The\r\n    # client must sign the request using the client_key, see README for\r\n    # instructions.\r\n    client_name = \"sample\"\r\n    client_key = \"3NdajqH8mBLokepU4I2Bh6KK84GUf1lzjnuTdskY\"\r\n\r\n    # Set the allowed hosts as an alternative to signed requests. Only those\r\n    # images which are served from the following hosts will be requested.\r\n    allowed_hosts = [\"localhost\"]\r\n\r\n    # Request-related settings\r\n    max_requests = 50\r\n    timeout = 7.5\r\n\r\n    # Set default resizing options\r\n    background = \"ccc\"\r\n    filter = \"bilinear\"\r\n    mode = \"crop\"\r\n    position = \"top\"\r\n\r\n    # Set default rotating options\r\n    expand = False\r\n\r\n    # Set default saving options\r\n    format = None\r\n    optimize = 1\r\n    quality = 90\r\n\r\nTools\r\n=====\r\n\r\nTo verify that your client application is generating correct signatures, use the signature command.\r\n\r\n    $ python -m pilbox.signature --key=abcdef \"x=1&y=2&z=3\"\r\n    Query String: x=1&y=2&z=3\r\n    Signature: c9516346abf62876b6345817dba2f9a0c797ef26\r\n    Signed Query String: x=1&y=2&z=3&sig=c9516346abf62876b6345817dba2f9a0c797ef26\r\n\r\nThe application allows the use of the resize functionality via the command line.\r\n\r\n    $ python -m pilbox.image --width=300 --height=300 http://i.imgur.com/zZ8XmBA.jpg > /tmp/foo.jpg\r\n\r\nIf a new mode is added or a modification was made to the libraries that would change the current expected output for tests, run the generate test command to regenerate the expected output for the test cases.\r\n\r\n    $ python -m pilbox.test.genexpected\r\n\r\nDeploying\r\n=========\r\n\r\nThe application itself does not include any caching. It is recommended that the application run behind a CDN for larger applications or behind varnish for smaller ones.\r\n\r\nDefaults for the application have been optimized for quality rather than performance. If you wish to get higher performance out of the application, it is recommended you use a less computationally expensive filtering algorithm and a lower JPEG quality. For example, add the following to the configuration.\r\n\r\n    # Set default resizing options\r\n    filter = \"bicubic\"\r\n    quality = 75\r\n\r\nExtension\r\n=========\r\n\r\nWhile it is generally recommended to use Pilbox as a standalone server, it can also be used as a library. To extend from it and build a custom image processing server, use the following example.\r\n\r\n    #!/usr/bin/env python\r\n\r\n    import tornado.gen\r\n\r\n    from pilbox.app import PilboxApplication, ImageHandler, main\r\n\r\n\r\n    class CustomApplication(PilboxApplication):\r\n        def get_handlers(self):\r\n            return [(r\"/(\\d+)x(\\d+)/(.+)\", CustomImageHandler)]\r\n\r\n\r\n    class CustomImageHandler(ImageHandler):\r\n        def prepare(self):\r\n            self.args = self.request.arguments.copy()\r\n\r\n        @tornado.gen.coroutine\r\n        def get(self, w, h, url):\r\n            self.args.update(dict(w=w, h=h, url=url))\r\n\r\n            self.validate_request()\r\n            resp = yield self.fetch_image()\r\n            self.render_image(resp)\r\n\r\n        def get_argument(self, name, default=None):\r\n            return self.args.get(name, default)\r\n\r\n\r\n    if __name__ == \"__main__\":\r\n        main(app=CustomApplication())\r\n\r\nChangelog\r\n=========\r\n\r\n  * 0.1: Image resizing fit\r\n  * 0.1.1: Image cropping\r\n  * 0.1.2: Image scaling\r\n  * 0.2: Configuration integration\r\n  * 0.3: Signature generation\r\n  * 0.3.1: Signature command-line tool\r\n  * 0.4: Image resize command-line tool\r\n  * 0.5: Facial recognition cropping\r\n  * 0.6: Fill resizing mode\r\n  * 0.7: Resize using crop position\r\n  * 0.7.1: Resize using a single dimension, maintaining aspect ratio\r\n  * 0.7.2: Added filter and quality options\r\n  * 0.7.3: Support python 3\r\n  * 0.7.4: Fixed cli for image generation\r\n  * 0.7.5: Write output in 16K blocks\r\n  * 0.8: Added support for ARGB (alpha-channel)\r\n  * 0.8.1: Increased max clients and write block sizes\r\n  * 0.8.2: Added configuration for max clients and timeout\r\n  * 0.8.3: Only allow http and https protocols\r\n  * 0.8.4: Added support for WebP\r\n  * 0.8.5: Added format option and configuration overrides for mode and format\r\n  * 0.8.6: Added custom position support\r\n  * 0.9: Added rotate operation\r\n  * 0.9.1: Added sub-region selection operation\r\n  * 0.9.4: Added Pilbox as a PyPI package\r\n  * 0.9.10: Converted README to reStructuredText\r\n  * 0.9.14: Added Sphinx docs\r\n  * 0.9.15: Added implicit base url to configuration\r\n  * 0.9.16: Added validate cert to configuration\r\n  * 0.9.17: Added support for GIF format\r\n  * 0.9.18: Fix for travis builds on python 2.6 and 3.3\r\n  * 0.9.19: Validate cert fix\r\n  * 0.9.20: Added optimize option\r\n  * 0.9.21: Added console script entry point\r\n  * 1.0.0: Modified for easier library usage\r\n  * 1.0.1: Added allowed operations and default operation\r\n  * 1.0.2: Modified to allow override of http content type\r\n  * 1.0.3: Safely catch image save errors\r\n  * 1.0.4: Added progressive option\r\n  * 1.1.0: Proxy server support\r\n  * 1.1.1: Added JPEG auto rotation based on EXIF orientation\r\n  * 1.1.2: Added keep JPEG quality option and set JPEG subsampling to keep\r\n  * 1.1.3: Fix auto rotation on JPEG with missing EXIF data\r\n  * 1.1.4: Exception handling around invalid EXIF data\r\n\r\nTODO\r\n====\r\n\r\n  * How to reconcile unavailable color profiles?\r\n  * Add backends (S3, file system, etc...) if necessary","google":"UA-8326371-5","note":"Don't delete this file! It's used internally to help with page regeneration."}